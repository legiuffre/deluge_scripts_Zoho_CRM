//beginning of iteration loop
// loop = {1};
loop = {1,2,3,4,5,6};
// loop = {1,2};
RecCnt = 0;
UpdtCnt = 0;
count = 0;
flag_error = 0;
pm_map_error = Map();
currentDate = now.toText();
//sets starttime and endtime from CST to Epoch
// endtime = 1688774400;
// starttime = 1672531200;
endtime = currentDate.unixEpoch().left(10);
stime = currentDate.subDay(7).toText();
starttime = stime.unixEpoch().left(10);
criteriaText = "(Truck_Status:equals:-Delivered)";
// criteriaText = "(Name:equals:4V4NC9EH7RN652666)";
zonarP = zoho.crm.getOrgVariable("zonar_p");
zonarU = zoho.crm.getOrgVariable("zonar_u");
enableUpdates = true;
info "enableUpdates: " + enableUpdates;
//searches for truck status based on "delivered" with a zonar GPS ID
csvFileRow = List();
csvFileRow.add("VIN,MPG,Odometer,Distance");
for each  ele in loop
{
	alltrucks = zoho.crm.searchRecords("Trucks",criteriaText,ele,200);
	if(alltrucks.size() == 0)
	{
		break;
	}
	for each  truck in alltrucks
	{
		final = Map();
		final2 = Map();
		vin = truck.get("Name");
		info vin;
		gpsID = isNull(truck.get("Zonar_GPS_ID"));
		if(gpsID == false)
		{
			RecCnt = RecCnt + 1;
			trkID = truck.get("id");
			InserviceDate = truck.get("Lease_Start_Date");
			recordCount = 0;
			paramMap = Map();
			paramMap.put("customer","rel9300");
			paramMap.put("username",zonarU);
			paramMap.put("password",zonarP);
			paramMap.put("action","showposition");
			paramMap.put("operation","path");
			paramMap.put("format","json");
			paramMap.put("starttime",starttime);
			paramMap.put("endtime",endtime);
			paramMap.put("version","2");
			paramMap.put("logvers","3.8");
			paramMap.put("reqtype","vin");
			paramMap.put("target",vin);
			actResp = invokeurl
			[
				url :"https://omi.zonarsystems.net/interface.php"
				type :GET
				parameters:paramMap
			];
			errCheck = actResp.contains("error");
			// 			//info errCheck;
			if(errCheck || actResp == "")
			{
				sendmail
				[
					from :zoho.adminuserid
					to :"it@teamrel.com"
					subject :"Schedule - Zonar Updates for Truck and PM Records"
					message :"Odometer Script Failed on " + vin + " with the following error " + actResp + "<br><br>"
				]
				info "Found Error";
				//send email command
			}
			if(actResp.length() > 500)
			{
				info "full response: " + Left(actResp,500);
			}
			else
			{
				info "no result: " + actResp;
				break;
			}
			pathEvents = actResp.get("pathevents");
			info "pathevents: " + Left(pathEvents,500);
			asset = pathEvents.get("assets");
			// 			info "asset: " + Left(asset,500);
			recordCount = asset.get(0).get("eventcount");
			info "recordCount: " + recordCount;
			if(recordCount.toNumber() > 0)
			{
				events = asset.get(0).getJSON("events");
				info "events: " + Left(events,500);
				// 				info events.get(0).get("lat");
				count = 0;
				last_odometer = 0;
				first_odometer = 0;
				last_distance = 0;
				first_distance = 0;
				last_time = "";
				first_time = "";
				last_fuel_counter = 0;
				first_fuel_counter = 0;
				distance_traveled = 0;
				mpg = 0;
				for each  event in events
				{
					// 					info "event: " + events.get(count).get("lat");
					if(count == recordCount - 1)
					{
						last_odometer = ifnull(events.get(count).get("odometer"),0);
						last_distance = ifnull(events.get(count).get("distance_traveled"),0);
						last_time = ifnull(events.get(count).get("time"),"");
						last_fuel_counter = ifnull(events.get(count).get("fuel_counter"),0);
						info "last_odometer: " + last_odometer;
						info "last_distance: " + last_distance;
						info "last_time: " + last_time;
						info "last_fuel_counter: " + last_fuel_counter;
						last_fuel_counter = last_fuel_counter.remove(",");
					}
					if(count == 1)
					{
						first_odometer = ifnull(events.get(count).get("odometer"),0);
						first_distance = ifnull(events.get(count).get("distance_traveled"),0);
						first_time = ifnull(events.get(count).get("time"),"");
						first_fuel_counter = ifnull(events.get(count).get("fuel_counter"),0);
						info "first_odometer: " + first_odometer;
						info "first_distance: " + first_distance;
						info "first_time: " + first_time;
						info "first_fuel_counter: " + first_fuel_counter;
						first_fuel_counter = first_fuel_counter.remove(",");
					}
					if(count <= recordCount)
					{
						count = count + 1;
					}
				}
				if(last_distance > 0 && last_fuel_counter.isNumber() && first_fuel_counter.isNumber())
				{
					distance_traveled = last_distance.toDecimal() - first_distance.toDecimal();
					fuel_consumed = last_fuel_counter.toDecimal() - first_fuel_counter.toDecimal();
					info "distance traveled: " + distance_traveled;
					info "fuel consumed: " + fuel_consumed;
					mpg = (distance_traveled.toDecimal() / fuel_consumed.toDecimal() * 10).round(1);
				}
				info "mpg: " + mpg;
			}
			if(mpg.toNumber() > 0)
			{
				final.put("MPG",mpg.toNumber());
			}
			final.put("Mileage_Driven",distance_traveled.toNumber());
			final.put("Current_Mileage",last_odometer.toNumber());
			final.put("Mileage_Last_Updated",now.toString("yyyy-MM-dd'T'HH:mm:ss"));
			info "truck rec update: " + final;
			pmID = zoho.crm.getRelatedRecords("Truck_PM","Trucks",trkID);
			final2.put("Current_Mileage",last_odometer.toNumber());
			final2.put("Solution_Center_Start_Date",ifnull(InserviceDate,""));
			info "pm rec update: " + final2;
			//updates record with "Mileage_Driven"
			if(enableUpdates)
			{
				update = zoho.crm.updateRecord("Trucks",trkID,final);
				if(update.containKey("Modified_Time") == false)
				{
					pm_map_error.put("Truck_VIN",vin);
					pm_map_error.put("Error_Message",update);
					info pm_map_error;
					flag_error = 1;
					sendmail
					[
						from :zoho.adminuserid
						to :"it@teamrel.com"
						subject :"Schedule - Zonar Updates for Truck and PM Records"
						message :"Truck Rec Failed to Update: " + vin + "<br><br>" + pm_map_error + "<br><br>"
					]
				}
				else
				{
					UpdtCnt = UpdtCnt + 1;
				}
				info update;
				if(pmID.size() > 0)
				{
					//Check for no records returned
					for each  rec in pmID
					{
						pm_update = zoho.crm.updateRecord("Truck_PM",rec.get("id"),final2);
						// 					Update TruckPM record with Current Module.
						if(pm_update.containKey("Modified_Time") == false)
						{
							pm_map_error.put("Truck_VIN",vin);
							pm_map_error.put("Error_Message",pm_update);
							info pm_map_error;
							flag_error = 1;
							sendmail
							[
								from :zoho.adminuserid
								to :"it@teamrel.com"
								subject :"Schedule - Zonar Updates for Truck and PM Records"
								message :"Truck Rec Failed to Update: " + vin + "<br><br>" + pm_map_error + "<br><br>"
							]
						}
					}
				}
				info pm_update;
			}
			info "__________________________";
			csvFileRow.add(vin + "," + mpg + "," + last_odometer + "," + distance_traveled);
		}
	}
}
csvFileName = "truck_export_" + currentDate.unixEpoch() + ".csv";
csvFileObj = csvFileRow.toString(zoho.encryption.urlDecode("%0A")).toFile(csvFileName);
if(flag_error == 1)
{
	sendmail
	[
		from :zoho.adminuserid
		to :"it@teamrel.com"
		subject :"Schedule - Zonar Updates for Truck and PM Records"
		message :"Schedule Failed: <br><br>" + pm_map_error + "<br><br>"
	]
}
else
{
	sendmail
	[
		from :zoho.adminuserid
		to :"it@teamrel.com"
		subject :"Schedule - Zonar Updates for Truck and PM Records - Completed Update"
		message :"Odometer Script Completed Update<br><br>Total Records Updated = " + UpdtCnt + "<br><br>Total Record Count = " + RecCnt + "<br><br>"
		Attachments :file:csvFileObj
	]
}
info " Total Records Updated = " + UpdtCnt;
info "Total Record Count = " + RecCnt;